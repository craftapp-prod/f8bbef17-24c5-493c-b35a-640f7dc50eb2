name: Deploy Infrastructure
'on':
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
permissions:
  id-token: write
  contents: read
env:
  PROJECT_ID: 2a55e8cc-59f3-4dfa-9213-535ce244b18c
  WEBHOOK_SECRET: MHv7y4zE9pXG2wqAFU1cJRt3NZmLkoBd
jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform -chdir=terraform init -input=false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Plan
        run: |
          terraform -chdir=terraform plan \
            -input=false \
            -out=tfplan
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Terraform Apply
        run: |
          terraform -chdir=terraform apply \
            -input=false \
            tfplan
        env:
          TF_VAR_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_website_files_path: ${{ github.workspace }}/website
      - name: Store Outputs in SSM
        run: |
          cd ./terraform
          # Get raw outputs without quotes
          S3_BUCKET=$(terraform output s3_bucket_name | grep -oE '".*"' | tr -d '"' | head -1)
          CF_ID=$(terraform output cloudfront_distribution_id | grep -oE '".*"' | tr -d '"' | head -1)
          CLOUDFRONT_URL=$(terraform output cloudfront_url | grep -oE '".*"' | tr -d '"' | head -1)
          APPRUNNER_URL=$(terraform output apprunner_service_url | grep -oE '".*"' | tr -d '"' | head -1)
          RDS_ENDPOINT=$(terraform output rds_endpoint | grep -oE '".*"' | tr -d '"' | head -1)

          aws ssm put-parameter --name "/app/${PROJECT_ID}/s3-bucket" --value "$S3_BUCKET" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/cf-id" --value "$CF_ID" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/cloudfront_url" --value "$CLOUDFRONT_URL" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/apprunner_url" --value "$APPRUNNER_URL" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/rds_endpoint" --value "$RDS_ENDPOINT" --type String --overwrite
          echo "Stored S3 Bucket: $S3_BUCKET"
          echo "Stored CloudFront ID: $CF_ID"
          echo "Stored CloudFront URL: $CLOUDFRONT_URL"
          echo "Stored AppRunner URL: $APPRUNNER_URL"
          echo "Stored Database URL: $RDS_ENDPOINT"
      - name: Notify infrastructure provisioning webhook if successful
        if: success()
        run: |
          cd ./terraform
          # Get raw outputs without quotes
          S3_BUCKET=$(terraform output s3_bucket_name | grep -oE '".*"' | tr -d '"' | head -1)
          CF_ID=$(terraform output cloudfront_distribution_id | grep -oE '".*"' | tr -d '"' | head -1)
          CLOUDFRONT_URL=$(terraform output cloudfront_url | grep -oE '".*"' | tr -d '"' | head -1)
          APPRUNNER_URL=$(terraform output apprunner_service_url | grep -oE '".*"' | tr -d '"' | head -1)
          RDS_ENDPOINT=$(terraform output rds_endpoint | grep -oE '".*"' | tr -d '"' | head -1)

          aws ssm put-parameter --name "/app/${PROJECT_ID}/s3-bucket" --value "$S3_BUCKET" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/cf-id" --value "$CF_ID" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/cloudfront_url" --value "$CLOUDFRONT_URL" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/apprunner_url" --value "$APPRUNNER_URL" --type String --overwrite
          aws ssm put-parameter --name "/app/${PROJECT_ID}/rds_endpoint" --value "$RDS_ENDPOINT" --type String --overwrite
          curl -X POST    https://api.project.craftapp.ai/api/deployment/webhook/advance/success/infrastructure \
           -H "Content-Type: application/json" \
           -H "x-webhook-secret: ${{ env.WEBHOOK_SECRET }}" \
           -d "{
             \"projectId\": \"${{ env.PROJECT_ID }}\",
             \"frontendUrl\": \"${CLOUDFRONT_URL}\",
             \"backendUrl\": \"${APPRUNNER_URL}\",
             \"databaseUrl\": \"${RDS_ENDPOINT}\",
             \"s3bucketUrl\": \"${S3_BUCKET}\",
             \"message\": \"Infrastructure provisioning succeeded\"
           }"
      - name: Notify infrastructure provisioning webhook if failed
        if: failure()
        run: |
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST    https://api.project.craftapp.ai/api/deployment/webhook/advance/failure/infrastructure \
            -H "Content-Type: application/json" \
            -H "x-webhook-secret: ${{ env.WEBHOOK_SECRET }}" \
            -d "{
               \"projectId\": \"${{ env.PROJECT_ID }}\",
               \"workflowUrl\": \"${WORKFLOW_URL}\",
               \"message\": \"Infrastructure provisioning failed\"
            }"

name: Deploy Frontend
'on':
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
permissions:
  id-token: write
  contents: read
env:
  PROJECT_ID: 2a55e8cc-59f3-4dfa-9213-535ce244b18c
  WEBHOOK_SECRET: MHv7y4zE9pXG2wqAFU1cJRt3NZmLkoBd
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
    steps:
      - uses: actions/checkout@v4
      - name: Get SSM Parameters
        id: ssm
        run: |
          echo "S3_BUCKET=$(aws ssm get-parameter --name "/app/${PROJECT_ID}/s3-bucket" --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "CF_ID=$(aws ssm get-parameter --name "/app/${PROJECT_ID}/cf-id" --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
          echo "APPRUNNER_URL=$(aws ssm get-parameter --name "/app/${PROJECT_ID}/apprunner_url" --query 'Parameter.Value' --output text)" >> $GITHUB_ENV
      - name: Debug Terraform Outputs
        run: |
          echo "S3_BUCKET_NAME: $S3_BUCKET"
          echo "CloudFront Distribution ID: $CF_ID"
          echo "App-runner url: $APPRUNNER_URL"
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_DEFAULT_REGION
      - name: Install and Build
        run: |
          cd frontend
          # First install to generate package-lock.json if missing
          npm install --legacy-peer-deps
          # Then run the build
          NEXT_PUBLIC_FASTAPI_URL=$APPRUNNER_URL npm run build
          # Copy the .env file to the output directory
          cp .env ./out/.env
      - name: Deploy to S3
        run: |
          # Upload static assets (excluding uploads folder)
          aws s3 sync ./frontend/out s3://$S3_BUCKET \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "uploads/*" \
            --exclude "*.html" \
            --exclude "*.json"

          # Upload HTML files (excluding uploads folder)
          aws s3 sync ./frontend/out s3://$S3_BUCKET \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --exclude "*" \
            --exclude "uploads/*" \
            --include "*.html" \
            --include "*.json"
      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CF_ID \
            --paths "/*"
      - name: Notify infrastructure provisioning webhook if successful
        if: success()
        run: |
          curl -X POST    https://api.project.craftapp.ai/api/deployment/webhook/advance/success/final \
          -H "Content-Type: application/json" \
          -H "x-webhook-secret: ${{ env.WEBHOOK_SECRET }}" \
          -d '{
          "projectId": "${{ env.PROJECT_ID }}",
          "message": "Infrastructure provisioning succeeded",
          "status": "success"
          }'
      - name: Notify infrastructure provisioning webhook if failed
        if: failure()
        run: |
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          curl -X POST    https://api.project.craftapp.ai/api/deployment/webhook/advance/failure/final \
          -H "Content-Type: application/json" \
          -H "x-webhook-secret: ${{ env.WEBHOOK_SECRET }}"
          -d '{
          "projectId": "${{ env.PROJECT_ID }}",
          "workflowUrl": "'"$WORKFLOW_URL"'",
          "message": "Infrastructure provisioning failed"
          }'
